{
  "name": "aho-corasick-automaton",
  "version": "0.0.0",
  "description": "Stream Aho-Corasick automata",
  "main": "aho-corasick.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "binary-search-bounds": "~0.3.1"
  },
  "devDependencies": {
    "tape": "~2.1.0",
    "tap": "~0.4.4",
    "array-trie": "0.0.2"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikolalysenko/aho-corasick-automaton.git"
  },
  "keywords": [
    "aho",
    "corasick",
    "automata",
    "stream",
    "array",
    "pattern",
    "match",
    "multiple",
    "strings"
  ],
  "author": {
    "name": "Mikola Lysenko"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mikolalysenko/aho-corasick-automaton/issues"
  },
  "readme": "aho-corasick-automaton\n======================\nA streaming [Aho-Corasick](http://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm) automata for matching strings.  This module is a low level interface, but can be used to construct more complex algorithms.\n\n# Example\n\n```javascript\nvar createTrie = require(\"array-trie\")\nvar createAC = require(\"aho-corasick-automaton\")\n\nvar trie = createTrie()\n\n//First build the trie data structure\ntrie.set([1,2,3], 1)\ntrie.set([2,3,4], 2)\ntrie.set([6,7,8], 3)\ntrie.set([1,2], 4)\ntrie.set([2,3], 5)\n\n//Next construct the automata and use it to \nvar automata = createAC(trie)\n\n//Now run it on some data\nvar data = [1,2,3,4,5,6,7,8,9]\nfor(var state=automata, i=0; i<data.length; ) {\n\n  //Process next symbol\n  state=state.push(data[i++])\n\n  //Print out all matches at position i\n  if(state.value !== undefined) {\n    console.log(\"matches at position\", i, \":\")\n    for(var cur = state; cur.value !== undefined; cur = cur.next) {\n      console.log(cur.value)  \n    }\n  }\n}\n```\n\nHere is some example output from the above program:\n\n```\nmatches at position 2 :\n4\nmatches at position 3 :\n1\n5\nmatches at position 4 :\n2\nmatches at position 8 :\n3\n```\n\n# Install\n\n    npm install aho-corasick-automata\n\n# API\n\n```javascript\nvar createAC = require(\"aho-corasick-automata\")\n```\n\n## Constructor\n\n### `var root = createAC(trie)`\nCreates an Aho-Corasick automata from the trie encoded as an [array-trie](https://github.com/mikolalysenko/array-trie)\n\n**Returns** A new Aho-Corasick automata\n\n## Methods\n\n### `automata.push(symbol)`\nReturns the next state of the automata after processing `symbol`\n\n* `symbol` is the next character in the stream to process\n\n**Returns** The next state of the automata\n\n### `automata.value`\nA value representing the terminal of the automata.  `undefined` if there is no trie entry at this point\n\n### `automata.next`\nA pointer to the next entry in the linked list of values at this automata state.  If the `value` is undefined, then this is the last node in this list.\n\n# Credits\n(c) 2013 Mikola Lysenko. MIT License",
  "readmeFilename": "README.md",
  "_id": "aho-corasick-automaton@0.0.0",
  "dist": {
    "shasum": "bd8f62fd6d209135f3716d19da5295a6f759d928",
    "tarball": "https://registry.npmjs.org/aho-corasick-automaton/-/aho-corasick-automaton-0.0.0.tgz"
  },
  "_from": "aho-corasick-automaton@0.0.0",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "mikolalysenko",
    "email": "mikolalysenko@gmail.com"
  },
  "maintainers": [
    {
      "name": "mikolalysenko",
      "email": "mikolalysenko@gmail.com"
    }
  ],
  "_shasum": "bd8f62fd6d209135f3716d19da5295a6f759d928",
  "_resolved": "https://registry.npmjs.org/aho-corasick-automaton/-/aho-corasick-automaton-0.0.0.tgz"
}
